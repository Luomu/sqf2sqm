#!/usr/bin/python
import sys

#common things for outputting
#can be changed to file output later
indchar = "\t"
ind = 0

def indent():
    global ind
    ind += 1

def unindent():
    global ind
    ind -= 1

def out(text):
    print(ind*indchar + text)

#Class is a printable thing with an opening and a closing brace.
#How stuff inside the braces is printed is up to the class.
class BisClass:
    def __init__(self, name):
        self.name = name
    def outputContents(self):
        out("Contents")
    def output(self):
        out("Class {0} {{".format(self.name))
        indent()
        self.outputContents()
        unindent()
        #~ out("};")
        out("}}; // {0}".format(self.name))

class Mission(BisClass):
    def __init__(self, name="Mission"):
        BisClass.__init__(self, name)
        self.version = Property("version",1)
        self.addOns = ArrayProperty("addOns", [])
        self.addOnsAuto = ArrayProperty("addOnsAuto", [])
        self.randomSeed = Property("randomSeed", 101) #I chose this randomly
        self.intel = Intel()
        self.groups = Groups()
        self.vehicles = Vehicles()

    def outputContents(self):
        out(self.addOns.toString())
        out(self.addOnsAuto.toString())
        out(self.randomSeed.toString())
        self.intel.output()
        if len(self.groups.groups) > 0:
            self.groups.output()
        if len(self.vehicles.vehicles) > 0:
            self.vehicles.output()

class Intel(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Intel")
        self.briefingName=StringProperty("briefingName", "")
        self.briefingDescription=StringProperty("")
        self.startWeather = Property("startWeather", 0.5)
        self.forecastWeather = Property("forecastWeather", 0.5)
        self.year = Property("year", 2012)
        self.month = Property("month", 6)
        self.day = Property("day", 15)

    def outputContents(self):
        out(self.startWeather.toString())
        out(self.forecastWeather.toString())
        out(self.year.toString())
        out(self.month.toString())
        out(self.day.toString())

#container class for groups
class Groups(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Groups")
        self.groups = []

    def outputContents(self):
        self.numgrps = Property("items", len(self.groups))
        out(self.numgrps.toString())
        for grp in self.groups:
            grp.output()

class Group(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Group") #should be: ItemN
        self.side = StringProperty("side", "WEST")
        self.vehicles = Vehicles()

    def outputContents(self):
        out(self.side.toString())
        self.vehicles.output()

#container class for vehicles
class Vehicles(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Vehicles")
        self.vehicles = []

    def outputContents(self):
        self.numveh = Property("items", len(self.vehicles))
        out(self.numveh.toString())
        for veh in self.vehicles:
            veh.output()

class Vehicle(BisClass):
    def __init__(self, name="Vehicle"):
        BisClass.__init__(self, name)
        self.position = ArrayProperty("position", [0,0,0])
        self.azimut = Property("azimut", 0)
        self.vehicleId = Property("id",-1)
        self.side = StringProperty("side", "EMPTY")
        self.className = StringProperty("vehicle", "")
        self.skill = Property("skill", 0.5)

    def outputContents(self):
        out(self.position.toString())
        out(self.azimut.toString())
        out(self.vehicleId.toString())
        out(self.side.toString())
        out(self.className.toString())
        out(self.skill.toString())

class Property:
    def __init__(self, label="", value=""):
        self.label = label
        self.value = value
    def toString(self):
        return "{0}={1};".format(self.label, self.value)

class StringProperty(Property):
    def toString(self):
        return "{0}=\"{1}\";".format(self.label, self.value)

class ArrayProperty(Property):
    def __init__(self, label, array):
        Property.__init__(self, label, 0)
        self.value = array

    def toString(self):
        return "{0}[]={{{1}}};".format(self.label, self.value)

#turn a createVehicle statement into a vehicle
def createToVehicle(create):
    #we can expect the statement to have a certain structure
    #_this = createVehicle ["Fort_Barracks_USMC", [1224.7141, 1484.4183, 1.1444092e-005], [], 0, "CAN_COLLIDE"];
    vehi = Vehicle("Unnamed")
    arr = create[create.find("[")+1:create.rfind("];")].split(",")
    #from this array we can just grab what we need
    vehi.className.value = arr[0].replace("\"","")
    #pos is overridden by setPos anyway
    #~ vehi.position.value[0] = arr[1].strip()[1:]
    #~ vehi.position.value[1] = arr[2].strip()
    #~ vehi.position.value[2] = arr[3].strip()[:-1]
    vehi.position.value = "0,1,2"
    #todo: array format is position[]={0,0,0}
    return vehi

class SqmDocument:
    def __init__(self, filename):
        self.version = Property("version", 1)
        self.nextId = -1
        self.mission = self.parseMission(filename)
        self.intro = Mission("Intro")
        self.outro = Mission("OutroWin")
        self.outroL = Mission("OutroLoose")

    def output(self):
        out(self.version.toString())
        self.mission.output()
        self.intro.output()
        self.outro.output()
        self.outroL.output()

    def getNextId(self):
        self.nextId += 1
        return self.nextId

    def parseMission(self, filename):
        try:
            fh = open(filename, "r");
        except IOError as (errno, errstring):
            print "Error {0} opening {1}: {2}".format(errno, filename, errstring)
            sys.exit(1)
        except:
            raise

        wad = fh.readlines()
        if not "activateAddons" in wad[0]:
            raise Exception("{0} is not a valid sqf file".format(filename))
        fh.close()

        miss = Mission()

        side = None
        isVehicle = False
        isUnit = False

        for line in wad:
            if "createCenter" in line:
                if "west" in line:
                    side = "WEST"
                elif "east" in line:
                    side = "EAST"
                else:
                    side = None
            if "createGroup" in line:
                assert side != None
                grp = Group()
                grp.side.value = side
                miss.groups.groups.append(grp)
            if line.startswith("_vehicle_"):
                if isVehicle or isUnit:
                    raise Exception("Already creating a unit or a vehicle")
                else:
                    isVehicle = True
            if line.startswith("_unit_"):
                if isUnit or isVehicle:
                    raise Exception("Already creating a unit or a vehicle")
                else:
                    isUnit = True
            if line.startswith("};"):
                isVehicle = False
                isUnit = False
            if isVehicle or isUnit:
                if "createVehicle" in line:
                    #we can extract class, position, markers,
                    #placement and special from this
                    veh = createToVehicle(line)
                    veh.vehicleId.value = self.getNextId()
                    veh.name = "Item{0}".format(len(miss.vehicles.vehicles))
                    miss.vehicles.vehicles.append(veh)
                if "createUnit" in line:
                    veh = createToVehicle(line)
                    veh.vehicleId.value = self.getNextId()
                    veh.name = "Item{0}".format(len(grp.vehicles.vehicles))
                    grp.vehicles.vehicles.append(veh)
                elif "setDir" in line:
                    veh.azimut.value = line[line.rfind(" ")+1:line.rfind(";")]
                elif "setPos" in line:
                    veh.position.value = line[line.rfind("[")+1:line.rfind("]")]
                elif "setUnitAbility" in line:
                    veh.skill.value = line[line.rfind(" ")+1:line.rfind(";")]

        return miss

doc = SqmDocument(sys.argv[1] if len(sys.argv) > 1 else "mission.sqf")
doc.output()
