#!/usr/bin/python
import sys
import os
import random

#common things for outputting
#can be changed to file output later
indchar = "\t"
ind = 0
handle = None

def indent():
    global ind
    ind += 1

def unindent():
    global ind
    ind -= 1

def out(text):
    print >>handle, (ind*indchar + text)

#Class is a printable thing with an opening and a closing brace.
#How stuff inside the braces is printed is up to the class.
class BisClass:
    def __init__(self, name):
        self.name = name
    def outputContents(self):
        out("Contents")
    def output(self):
        out("class {0} {{".format(self.name))
        indent()
        self.outputContents()
        unindent()
        out("}}; // {0}".format(self.name))

class Mission(BisClass):
    def __init__(self, name="Mission"):
        BisClass.__init__(self, name)
        self.addOns = ArrayProperty("addOns", [])
        self.addOnsAuto = ArrayProperty("addOnsAuto", [])
        self.randomSeed = Property("randomSeed", random.randint(100,5000))
        self.intel = Intel()
        self.groups = Groups()
        self.vehicles = Vehicles()
        self.markers = Markers()

    def outputContents(self):
        out(self.addOns.toString())
        out(self.addOnsAuto.toString())
        out(self.randomSeed.toString())
        self.intel.output()
        if len(self.groups.groups) > 0:
            self.groups.output()
        if len(self.vehicles.vehicles) > 0:
            self.vehicles.output()
        if len(self.markers.markers) > 0:
            self.markers.output()

class Intel(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Intel")
        self.briefingName=StringProperty("briefingName", "")
        self.briefingDescription=StringProperty("")
        self.startWeather = Property("startWeather", 0.5)
        self.forecastWeather = Property("forecastWeather", 0.5)
        self.year = Property("year", 2012)
        self.month = Property("month", 6)
        self.day = Property("day", 15)

    def outputContents(self):
        out(self.startWeather.toString())
        out(self.forecastWeather.toString())
        out(self.year.toString())
        out(self.month.toString())
        out(self.day.toString())

#container class for groups
class Groups(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Groups")
        self.groups = []

    def outputContents(self):
        self.numgrps = Property("items", len(self.groups))
        out(self.numgrps.toString())
        for grp in self.groups:
            grp.output()

class Group(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Group") #should be: ItemN
        self.side = StringProperty("side", "WEST")
        self.vehicles = Vehicles()

    def outputContents(self):
        out(self.side.toString())
        self.vehicles.output()

#container class for vehicles
class Vehicles(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Vehicles")
        self.vehicles = []

    def outputContents(self):
        self.numveh = Property("items", len(self.vehicles))
        out(self.numveh.toString())
        for veh in self.vehicles:
            veh.output()

#container class for markers
class Markers(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Markers")
        self.markers = []
    
    def outputContents(self):
        self.numMarkers = Property("items", len(self.markers))
        out(self.numMarkers.toString())
        for mrk in self.markers:
            mrk.output()

class Vehicle(BisClass):
    def __init__(self, name="Vehicle"):
        BisClass.__init__(self, name)
        self.position = ArrayProperty("position", [0,0,0])
        self.placement = Property("placement", None)
        self.infoAge = StringProperty("age", None)
        self.azimut = Property("azimut", 0)
        self.vehicleId = Property("id",-1)
        self.side = StringProperty("side", "EMPTY")
        self.className = StringProperty("vehicle", "")
        self.player = StringProperty("player",None)
        self.leader = Property("leader", None)
        self.rank = StringProperty("rank", None)
        self.skill = Property("skill", 0.5)
        self.health = Property("health", None)
        self.ammo = Property("ammo", None)
        self.text = StringProperty("text", None) #name

    def outputContents(self):
        self.position.output()
        self.placement.output()
        self.infoAge.output()
        self.azimut.output()
        self.vehicleId.output()
        self.side.output()
        self.className.output()
        self.player.output()
        self.leader.output()
        self.rank.output()
        self.skill.output()
        self.health.output()
        self.ammo.output()
        self.text.output()

class Marker(BisClass):
    def __init__(self, name="Marker"):
        BisClass.__init__(self, name)
        self.position = Position("0,0,0")
        self.markerName = StringProperty("name")
        self.markerText = StringProperty("text")
        self.markerShape = StringProperty("markerType")
        self.markerType = StringProperty("type")
        self.markerColor = StringProperty("colorName")
        self.markerFill = StringProperty("fillName")
        self.axisA = Property("a")
        self.axisB = Property("b")
        self.angle = Property("angle")
        self.drawBorder = Property("drawBorder", 1)
    
    def outputContents(self):
        self.position.output()
        self.markerName.output()
        self.markerText.output()
        self.markerShape.output()
        self.markerType.output()
        self.markerColor.output()
        self.markerFill.output()
        self.axisA.output()
        self.axisB.output()
        self.angle.output()
        self.drawBorder.output()

#name=value;
class Property:
    def __init__(self, label="", value=None):
        self.label = label
        self.value = value

    def toString(self):
        return "{0}={1};".format(self.label, self.value)

    def output(self):
        if(self.value != None):
            out(self.toString())

#name="value";
class StringProperty(Property):
    def toString(self):
        return "{0}=\"{1}\";".format(self.label, self.value)

#propertyname[]={contents};
class ArrayProperty(Property):
    def __init__(self, label, array):
        Property.__init__(self, label, 0)
        self.value = array

    def toString(self):
        if len(self.value) > 0:
            return "{0}[]={{{1}}};".format(self.label, self.value)
        else:
            return "{0}[]={{}};".format(self.label)

class Position(Property):
    def __init__(self, posstring):
        Property.__init__(self, "position")
        self.value = 1 #hack
        #it can be 2 or 3 length
        position = posstring.replace(" ","").split(",")
        self.x = position[0]
        self.y = position[1]
        if len(position) > 2:
            self.z = position[2]
        else:
            self.z = None
    
    def toString(self):
        if self.z is None:
            return "{0}[]={{{1},0,{2}}};".format(self.label, self.x, self.y)
        else:
            return "{0}[]={{{1},{2},{3}}};".format(self.label, self.x, self.z, self.y)

#a very simple search for a string value between quotes
def findQuotedString(line):
    return line[line.find("\"")+1:line.rfind("\"")]

#pick a value from the end of a line
def findSimpleValue(line):
    return line[line.rfind(" ")+1:-3]

#turn a createVehicle statement into a vehicle
def createToVehicle(create):
    #we can expect the statement to have a certain structure
    #_this = createVehicle ["Fort_Barracks_USMC", [1224.7141, 1484.4183, 1.1444092e-005], [], 0, "CAN_COLLIDE"];
    #or
    #_this = createVehicle ["RoadBarrier_long", [4234.3018, 3948.8118], [], 0, "CAN_COLLIDE"];
    vehi = Vehicle()
    create = create[create.find("[")+1:create.rfind("];")]
    arr = create.split(",")
    #from this array we can just grab what we need
    vehi.className.value = arr[0].replace("\"","")

    #in vehicles pos is overridden by setPos anyway
    position = create[create.find("[")+1:create.find("]")]
    vehi.position.value = position
    return vehi

def createToUnit(create):
    #we expect:
    #_this = _group_0 createUnit ["BAF_Soldier_TL_W", [1370.531, 1470.5341], [], 5, "FORM"];
    unit = Vehicle()
    create = create[create.find("[")+1:-4]
    unit.className.value = create[1:create.find("\"",1)]
    position = create[create.find("[")+1:create.find("]")]
    #it can be 2 or 3 length
    position = position.replace(" ","").split(",")
    x = position[0]
    y = position[1]
    if len(position) > 2:
        z = position[2]
    else:
        z = 0
    unit.position.value = "{0}, {1}, {2}".format(x, z, y)
    unit.placement.value = create.split(",")[-2].strip()
    return unit

def findBracketedString(brstring):
    brstring = brstring[brstring.find("[")+1:brstring.rfind("]")]
    return brstring

def createMarker(create):
    #expected: _this = createMarker ["markerName", [posx, posz, posy]];"
    mark = Marker()
    create = findBracketedString(create)
    mark.markerName.value = findQuotedString(create)
    mark.position = Position(findBracketedString(create))
    return mark
    

class SqmDocument:
    def __init__(self, filename):
        self.version = Property("version", 11)
        self.nextId = -1
        self.mission = self.parseMission(filename)
        self.intro = Mission("Intro")
        self.outro = Mission("OutroWin")
        self.outroL = Mission("OutroLoose")

    def output(self):
        out(self.version.toString())
        self.mission.output()
        self.intro.output()
        self.outro.output()
        self.outroL.output()

    def getNextId(self):
        self.nextId += 1
        return self.nextId

    def parseMission(self, filename):
        fh = open(filename, "r");

        wad = fh.readlines()
        if not "activateAddons" in wad[0]:
            raise Exception("{0} is not a valid sqf file".format(filename))
        fh.close()

        miss = Mission()

        side = None
        isVehicle = False
        isUnit = False
        isMarker = False

        for line in wad:
            if "createCenter" in line:
                if "west" in line:
                    side = "WEST"
                elif "east" in line:
                    side = "EAST"
                else:
                    side = None
            if "createGroup" in line:
                assert side != None
                grp = Group()
                grp.side.value = side
                grp.name = "Item{0}".format(len(miss.groups.groups))
                miss.groups.groups.append(grp)
            if line.startswith("_vehicle_"):
                if isVehicle or isUnit:
                    raise Exception("Already creating a unit or a vehicle")
                else:
                    isVehicle = True
            if line.startswith("_unit_"):
                if isUnit or isVehicle:
                    raise Exception("Already creating a unit or a vehicle")
                else:
                    isUnit = True
            if line.startswith("};"):
                isVehicle = False
                isUnit = False
            if isVehicle or isUnit:
                if "createVehicle" in line:
                    #we can extract class, position, markers,
                    #placement and special from this
                    veh = createToVehicle(line)
                    veh.vehicleId.value = self.getNextId()
                    veh.name = "Item{0}".format(len(miss.vehicles.vehicles))
                    miss.vehicles.vehicles.append(veh)
                if "createUnit" in line:
                    veh = createToUnit(line)
                    veh.vehicleId.value = self.getNextId()
                    veh.name = "Item{0}".format(len(grp.vehicles.vehicles))
                    veh.side.value = side
                    grp.vehicles.vehicles.append(veh)
                elif "setVehicleVarName" in line:
                    veh.text.value = findQuotedString(line)
                elif "setVehicleArmor" in line:
                    veh.health.value = findSimpleValue(line)
                elif "setVehicleAmmo" in line:
                    veh.ammo.value = findSimpleValue(line)
                elif "setTargetAge" in line:
                    veh.infoAge.value = findQuotedString(line)
                elif "setUnitRank" in line:
                    veh.rank.value = findQuotedString(line)
                elif "setDir" in line:
                    veh.azimut.value = line[line.rfind(" ")+1:line.rfind(";")]
                elif "setPos" in line:
                    #notice y,z swap
                    pos = line[line.rfind("[")+1:line.rfind("]")].split(",")
                    x = pos[0]
                    y = pos[1]
                    z = pos[2] if len(pos) > 2 else 0
                    veh.position.value = "{0}, {1}, {2}".format(x, z, y)
                elif "setUnitAbility" in line:
                    veh.skill.value = line[line.rfind(" ")+1:line.rfind(";")]
                elif "selectPlayer" in line:
                    veh.player.value = "PLAYER COMMANDER"
                elif "selectLeader" in line:
                    veh.leader.value = 1
            if "createMarker" in line:
                isMarker = True
                mrk = createMarker(line)
                mrk.name = "Item{0}".format(len(miss.markers.markers))
                miss.markers.markers.append(mrk)
                continue
            if isMarker:
                if "setMarkerShape" in line:
                    mrk.markerShape.value = findQuotedString(line)
                elif "setMarkerText" in line:
                    mrk.markerText.value = findQuotedString(line)
                elif "setMarkerType" in line:
                    mrk.markerType.value = findQuotedString(line)
                elif "setMarkerBrush" in line:
                    mrk.markerFill.value = findQuotedString(line)
                elif "setMarkerSize" in line:
                    sizeArray = line[line.rfind("[")+1:line.rfind("]")].split(",")
                    mrk.axisA.value = sizeArray[0].strip()
                    mrk.axisB.value = sizeArray[1].strip()
                elif "setMarkerColor" in line:
                    mrk.markerColor.value = findQuotedString(line)
                elif line.startswith("_marker_"):
                    isMarker = False
                else:
                    raise Exception("Error while creating marker, line: {0}".format(line))
        return miss

try:
    infilename = sys.argv[1] if len(sys.argv) > 1 else "mission.sqf"
    outfilename = os.path.join(os.path.dirname(infilename), "mission.sqm")
    doc = SqmDocument(infilename)
    handle = open(outfilename, "w")
    doc.output()
except IOError as (errno, errstring):
    print "I/O error {0}: {1}".format(errno, errstring)
    #we wait for a keypress for non-terminal users to see the message
    raw_input("Press a key to exit")
except Exception as (errstring):
    print "Exception: {0}".format(errstring)
    raw_input("Press a key to exit")

if handle != None: handle.close()
