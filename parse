#!/usr/bin/python
indchar = "  "
ind = 0

def indent():
    global ind
    ind += 1

def unindent():
    global ind
    ind -= 1

def out(text):
    print(ind*indchar + text)

#Class is a printable thing with an opening and a closing brace
class BisClass:
    def __init__(self, name):
        self.name = name
    def outputContents(self):
        out("Contents")
    def output(self):
        out("Class {0} {{".format(self.name))
        indent()
        self.outputContents()
        unindent()
        out("};")

class Mission(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Mission")
        self.version = Property("version",1)
        self.randomSeed = Property("randomSeed", 101) #I chose this randomly
        self.intel = Intel()
        self.groups = 0
        self.vehicles = []

    def outputContents(self):
        out(self.randomSeed.toString())

class Property:
    def __init__(self, label="", value=""):
        self.label = label
        self.value = value
    def toString(self):
        return "{0}={1};".format(self.label, self.value)

class StringProperty(Property):
    def toString(self):
        return "{0}=\"{1}\";".format(self.label, self.value)

class ArrayProperty(Property):
    #not actually an number array at the moment. Just special formatting.
    def __init__(self, label, array):
        Property.__init__(self, label, 0)
        self.value = [0,0,0]

    def toString(self):
        return "{0}[]={{{1}}};".format(self.label, self.value)
        #return "{0}[]={{{1},{2},{3}}};".format(self.label,
        #    self.value[0], self.value[1], self.value[2])

class Vehicle:
    def __init__(self):
        self.position = ArrayProperty("position", [0,0,0])
        self.azimut = Property("azimut", 0)
        self.vehicleId = Property("id",-1)
        self.side = StringProperty("side", "EMPTY")
        self.className = StringProperty("vehicle", "")
        self.skill = 0.0

class Intel:
    def __init__(self):
        self.briefingName=""
        self.briefingDescription=""
        self.startWeather = 0.0
        self.forecastWeather = 0.0
        self.year = 2012
        self.month = 6
        self.day = 15

#for now, this just builds an array and dumps it to the console
class MissionPrinter:
    def __init__(self):
        self.indlev = 0
        self.indchar = "  "
        self.data = []

    def indent(self):
        self.indlev += 1

    def unindent(self):
        self.indlev -= 1

    def printProp(self, name, value):
        self.addline("{0}=\"{1}\";".format(name,value))

    def addline(self, line):
        self.data.append((self.indlev * self.indchar)+ line)
    def printMission(self, miss):
        self.addline(miss.version.toString())
        self.addline("Class Mission {");
        self.indent()
        self.addline("addOns[]={{}};")
        self.addline("addOnsAuto[]={{}};")
        self.addline(miss.randomSeed.toString())
        self.unindent()
        self.addline("};")
        #~ for veh in miss.vehicles:
            #~ self.data.append(veh.position.toString())
            #~ self.data.append(veh.vehicleId.toString())
            #~ self.data.append(veh.side.toString())
            #~ self.data.append(veh.className.toString())
            #~ self.data.append(veh.azimut.toString())

        for line in self.data:
            print line

#turn a createVehicle statement into a vehicle
def createToVehicle(create):
    #we can expect the statement to have a certain structure
    #_this = createVehicle ["Fort_Barracks_USMC", [1224.7141, 1484.4183, 1.1444092e-005], [], 0, "CAN_COLLIDE"];
    vehi = Vehicle()
    arr = create[create.find("[")+1:create.rfind("];")].split(",")
    #from this array we can just grab what we need
    vehi.className.value = arr[0].replace("\"","")
    #pos is overridden by setPos anyway
    return vehi

def doIt():
    filename = "mission.sqf";
    try:
        fh = open(filename, "r");
    except IOError as (errno, errstring):
        print "Error {0} opening {1}: {2}".format(errno, filename, errstring)
        return
    except:
        raise

    wad = fh.readlines()
    fh.close()

    miss = Mission()

    isVehicle = False

    for line in wad:
        if line.startswith("_vehicle_"):
            if isVehicle:
                raise Exception("Already creating a vehicle")
            else:
                isVehicle = True
        if isVehicle:
            if line.startswith("};"):
                isVehicle = False
            elif "createVehicle" in line:
                #we can extract class, position, markers,
                #placement and special from this
                veh = createToVehicle(line)
                veh.vehicleId.value = len(miss.vehicles)
                miss.vehicles.append(veh)
            elif "setDir" in line:
                veh.azimut.value = line[line.rfind(" ")+1:line.rfind(";")]
            elif "setPos" in line:
                veh.position.value = line[line.rfind("[")+1:line.rfind("]")]
    printer = MissionPrinter()
    printer.printMission(miss)

#doIt()
mission = Mission()
intro = BisClass("Intro")
#~ outro = BisClass("OutroWin")
#~ outroL = BisClass("OutroLoose")
mission.output()
intro.output()
