#!/usr/bin/python
indchar = "  "
ind = 0

def indent():
    global ind
    ind += 1

def unindent():
    global ind
    ind -= 1

def out(text):
    print(ind*indchar + text)

#Class is a printable thing with an opening and a closing brace.
#How stuff inside the braces is printed is up to the class.
class BisClass:
    def __init__(self, name):
        self.name = name
    def outputContents(self):
        out("Contents")
    def output(self):
        out("Class {0} {{".format(self.name))
        indent()
        self.outputContents()
        unindent()
        out("};")

class Mission(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Mission")
        self.version = Property("version",1)
        self.addOns = ArrayProperty("addOns", [])
        self.addOnsAuto = ArrayProperty("addOnsAuto", [])
        self.randomSeed = Property("randomSeed", 101) #I chose this randomly
        self.intel = Intel()
        self.groups = 0
        self.vehicles = Vehicles()

    def outputContents(self):
        out(self.addOns.toString())
        out(self.addOnsAuto.toString())
        out(self.randomSeed.toString())
        self.intel.output()
        self.vehicles.output()

class Intel(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Intel")
        self.briefingName=StringProperty("briefingName", "")
        self.briefingDescription=StringProperty("")
        self.startWeather = Property("startWeather", 0.5)
        self.forecastWeather = Property("forecastWeather", 0.5)
        self.year = Property("year", 2012)
        self.month = Property("month", 6)
        self.day = Property("day", 15)

    def outputContents(self):
        out(self.startWeather.toString())
        out(self.forecastWeather.toString())
        out(self.year.toString())
        out(self.month.toString())
        out(self.day.toString())

#container class for vehicles
class Vehicles(BisClass):
    def __init__(self):
        BisClass.__init__(self, "Vehicles")
        self.vehicles = [Vehicle("Item0"),Vehicle("Item1")]

    def outputContents(self):
        self.numveh = Property("items", len(self.vehicles))
        out(self.numveh.toString())
        for veh in self.vehicles:
            veh.output()

class Vehicle(BisClass):
    def __init__(self, name="Vehicle"):
        BisClass.__init__(self, name)
        self.position = ArrayProperty("position", [0,0,0])
        self.azimut = Property("azimut", 0)
        self.vehicleId = Property("id",-1)
        self.side = StringProperty("side", "EMPTY")
        self.className = StringProperty("vehicle", "")
        self.skill = Property("skill", 0.5)

    def outputContents(self):
        out(self.position.toString())
        out(self.azimut.toString())
        out(self.vehicleId.toString())
        out(self.side.toString())
        out(self.className.toString())
        out(self.skill.toString())

class Property:
    def __init__(self, label="", value=""):
        self.label = label
        self.value = value
    def toString(self):
        return "{0}={1};".format(self.label, self.value)

class StringProperty(Property):
    def toString(self):
        return "{0}=\"{1}\";".format(self.label, self.value)

class ArrayProperty(Property):
    def __init__(self, label, array):
        Property.__init__(self, label, 0)
        self.value = array

    def toString(self):
        return "{0}[]={{{1}}};".format(self.label, self.value)

#turn a createVehicle statement into a vehicle
def createToVehicle(create):
    #we can expect the statement to have a certain structure
    #_this = createVehicle ["Fort_Barracks_USMC", [1224.7141, 1484.4183, 1.1444092e-005], [], 0, "CAN_COLLIDE"];
    vehi = Vehicle()
    arr = create[create.find("[")+1:create.rfind("];")].split(",")
    #from this array we can just grab what we need
    vehi.className.value = arr[0].replace("\"","")
    #pos is overridden by setPos anyway
    return vehi

def doIt():
    filename = "mission.sqf";
    try:
        fh = open(filename, "r");
    except IOError as (errno, errstring):
        print "Error {0} opening {1}: {2}".format(errno, filename, errstring)
        return
    except:
        raise

    wad = fh.readlines()
    fh.close()

    miss = Mission()

    isVehicle = False

    for line in wad:
        if line.startswith("_vehicle_"):
            if isVehicle:
                raise Exception("Already creating a vehicle")
            else:
                isVehicle = True
        if isVehicle:
            if line.startswith("};"):
                isVehicle = False
            elif "createVehicle" in line:
                #we can extract class, position, markers,
                #placement and special from this
                veh = createToVehicle(line)
                veh.vehicleId.value = len(miss.vehicles)
                miss.vehicles.append(veh)
            elif "setDir" in line:
                veh.azimut.value = line[line.rfind(" ")+1:line.rfind(";")]
            elif "setPos" in line:
                veh.position.value = line[line.rfind("[")+1:line.rfind("]")]

#doIt()
mission = Mission()
#~ intro = BisClass("Intro")
#~ outro = BisClass("OutroWin")
#~ outroL = BisClass("OutroLoose")
mission.output()
#~ intro.output()
#~ outro.output()
#~ outroL.output()
